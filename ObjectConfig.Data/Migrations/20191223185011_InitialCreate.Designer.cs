// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ObjectConfig.Data;

namespace ObjectConfig.Data.Migrations
{
    [DbContext(typeof(ObjectConfigContext))]
    [Migration("20191223185011_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ObjectConfig.Data.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("ApplicationId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("ObjectConfig.Data.Config", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset>("DateFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<string>("VersionFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(23)")
                        .HasMaxLength(23);

                    b.Property<string>("VersionTo")
                        .HasColumnType("nvarchar(23)")
                        .HasMaxLength(23);

                    b.HasKey("ConfigId");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("ObjectConfig.Data.Environment", b =>
                {
                    b.Property<int>("EnvironmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("EnvironmentId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("ObjectConfig.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGlobalAdmin")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ObjectConfig.Data.UsersApplications", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("UsersApplications");
                });

            modelBuilder.Entity("ObjectConfig.Data.UsersEnvironments", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EnvironmentId");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("UsersEnvironments");
                });

            modelBuilder.Entity("ObjectConfig.Data.UsersTypes", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ValueTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ValueTypeId");

                    b.HasIndex("ValueTypeId");

                    b.ToTable("UsersTypes");
                });

            modelBuilder.Entity("ObjectConfig.Data.ValueConfig", b =>
                {
                    b.Property<int>("ValueConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConfigId")
                        .HasColumnType("int");

                    b.Property<int?>("ParrentPropertyValueConfigId")
                        .HasColumnType("int");

                    b.Property<int>("ParrentValueConfigId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeValueTypeId")
                        .HasColumnType("int");

                    b.HasKey("ValueConfigId");

                    b.HasIndex("ConfigId");

                    b.HasIndex("ParrentPropertyValueConfigId");

                    b.HasIndex("TypeValueTypeId");

                    b.ToTable("ValueConfigs");
                });

            modelBuilder.Entity("ObjectConfig.Data.ValueObject", b =>
                {
                    b.Property<int>("ValueTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChangeOwnerUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TypeValueTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(2147483647);

                    b.HasKey("ValueTypeId");

                    b.HasIndex("ChangeOwnerUserId");

                    b.HasIndex("TypeValueTypeId");

                    b.ToTable("ValueObjects");
                });

            modelBuilder.Entity("ObjectConfig.Data.ValueType", b =>
                {
                    b.Property<int>("ValueTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ValueTypeId");

                    b.ToTable("ValueTypes");
                });

            modelBuilder.Entity("ObjectConfig.Data.Config", b =>
                {
                    b.HasOne("ObjectConfig.Data.Environment", "Environment")
                        .WithMany("Configs")
                        .HasForeignKey("EnvironmentId");
                });

            modelBuilder.Entity("ObjectConfig.Data.Environment", b =>
                {
                    b.HasOne("ObjectConfig.Data.Application", "Application")
                        .WithMany("Environments")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("ObjectConfig.Data.UsersApplications", b =>
                {
                    b.HasOne("ObjectConfig.Data.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectConfig.Data.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ObjectConfig.Data.UsersEnvironments", b =>
                {
                    b.HasOne("ObjectConfig.Data.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectConfig.Data.User", "User")
                        .WithMany("Environments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ObjectConfig.Data.UsersTypes", b =>
                {
                    b.HasOne("ObjectConfig.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectConfig.Data.ValueType", "ValueType")
                        .WithMany()
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ObjectConfig.Data.ValueConfig", b =>
                {
                    b.HasOne("ObjectConfig.Data.Config", "Config")
                        .WithMany("Configs")
                        .HasForeignKey("ConfigId");

                    b.HasOne("ObjectConfig.Data.ValueConfig", "ParrentProperty")
                        .WithMany()
                        .HasForeignKey("ParrentPropertyValueConfigId");

                    b.HasOne("ObjectConfig.Data.ValueType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeValueTypeId");
                });

            modelBuilder.Entity("ObjectConfig.Data.ValueObject", b =>
                {
                    b.HasOne("ObjectConfig.Data.User", "ChangeOwner")
                        .WithMany()
                        .HasForeignKey("ChangeOwnerUserId");

                    b.HasOne("ObjectConfig.Data.ValueType", "Type")
                        .WithMany("ValueObjects")
                        .HasForeignKey("TypeValueTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
